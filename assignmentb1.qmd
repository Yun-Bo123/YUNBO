```{r exercise1.1}
a=1:20
print(a)

b=20:1
print(b)

c0=1:20
c1=19:1
c=c(c0,c1)
print(c)

tmp=c(4,6,3)
print(tmp)

a=rep(c(4,6,3),times=10)
print(a)

a=rep(c(4,6,3),times=10)
b=c(a,4)
print(b)

a=rep(4,times=10)
b=rep(6,times=20)
c=rep(3,times=30)
d=c(a,b,c)
print(d)

```

```{r exercise1.2}
x <- seq(3, 6, by = 0.1)
y <- exp(x) * cos(x)
print(y)
```


```{r exercise1.3}
x=seq(3,36,by=3)
y=seq(1,34,by=3)
a=0.1^x*0.2^y
print(a)

a=seq(2,25)
x=(2^a)/a
print(x)
```
```{r exercise1.4}
i=10:100
value=sum(i^3+4*i^2)
print(value)

i=1:25
value=sum(2^i/i+3^i/i^2)
print(value)
```


```{r exercise1.5}
a=paste("lable",1:30)
print(a)

a=paste("fn",1:30,seq="")
print(a)
```
```{r exercise1.6}
set.seed(50)
xVec <- sample(0:999, 250, replace = TRUE)
yVec <- sample(0:999, 250, replace = TRUE)

a=yVec[2:length(yVec)]-xVec[1:(length(xVec)-1)]
print(a)

a=sin(yVec[1:(length(yVec)-1)])/cos(xVec[2:length(xVec)])
print(a)

a=xVec[1:length(xVec[1:(length(xVec)-2)])]+2*xVec[2:(length(xVec)-1)]+xVec[3:length(xVec)]
print(a)

value=sum(exp(-xVec[2:length(xVec)])/xVec[1:(length(xVec)-1)]+10)
print(value)

a=yVec[yVec>600]
print(a)

a=which(yVec>600)
print(a)

a=xVec[which(yVec>600)]
print(a)

x1=mean(xVec)
a=abs(xVec-x1)^(1/2)
print(a)

y1=max(yVec)
a=sum(yVec>=y1-200)
print(a)

a=sum(xVec%2==0)
print(a)a

a=order(yVec)
a1=xVec[a]
print(a1)

a=seq(1:length(yVec),by=3)
a1=yVec[a]

x=seq(2,38,by=2)
x1=seq(3,39,by=2)
a=cumprod(x/x1)
value=1+sum(a)
print(value)
```


```{r exercise2.1}
a = matrix(c(1,5,-2, 1,2,-1, 3,6,-3), nrow=3, ncol=3, byrow=FALSE)
A =a%*%a%*%a
print(A)
all(A == 0)

a[,3] <- a[,2] + a[,3]
print(A)
```

```{r exercise2.2}
b=matrix(rep(c(10,-10,10),times=10),nrow=15,ncol = 3,byrow = ture)
print(b)
value=crossprod(b)
print(value)
```


```{r exercise2.3}
a=matrix(0,nrow=6,ncol = 6)
a=a[abs(row(a)-col(a)==1)]=1
print(a)
```

```{r exercise2.4}
a=outer(0:4,0:4,function(x,y)(x+y))
print(a)
```


```{r exercise2.5}

a=matrix(0, nrow=5, ncol=5)
a=(row(a)+col(a)-2%%5)
print(a)

a=matrix(0,nrow=10,ncol=10)
a=(row(a)+col(a)-2%%10)
print(a)

a=matrix(0,nrow=9,ncol = 9)
a=((row(a)-col(a))%%9)
print(a)
```


```{r exercise2.6}
```A <- matrix(c(
  1, 2, 3, 4, 5,
  2, 1, 2, 3, 4,
  3, 2, 1, 2, 3,
  4, 3, 2, 1, 2,
  5, 4, 3, 2, 1
), nrow=5, ncol=5, byrow=TRUE)
y <- c(7, -1, -3, 5, 17)
x <- solve(A, y)
```print(x)

```


```{r exercise2.7}
set.seed(75)
aMat <- matrix(sample(10, size=60, replace=TRUE), nrow=6)
a=rowsum((aMat)>4)
print(a)

a=rowsum(aMat==7)
b=which(a==2)
print(b)

y <- colSums(aMat)
Y <- outer(y, y, "+")  
which(Y > 75, arr.ind = TRUE)
print(Y)

x <- which(upper.tri(sumMat) & sumMat > 75, arr.ind = TRUE)
ptint(x)
```


```{r exercise2.8}
i=1:20
j=1:5
a=sum(i^4)
b=sum(1/(3+j))
value=(a*b)
print(value)

i=1:20
j=1:5
a=outer(i,j,function(i,j)i^4(1/3+i*j))
a1=sum(a)
print(a1)

result=sum(sapply(1:10, function(i) {
 j=1:i
sum(i^4 / (3 + i * j))
}))
print(result)
```


```{r exercise3.1}
tmpFn1=function(xVec){
n=length(xVec)
xVec^n}

tmpFn2=function(xVec){
  n=length(xVec)
  (xVec^n)/n
}
tmpFn3=function(x,n){
  n=1:n
  1+sum(x^n/n)}
```


```{r exercise3.2}
tmpFn <- function(xVec) {
  n <- length(xVec)
  (xVec[1:(n-2)] + xVec[2:(n-1)] + xVec[3:n]) / 3
```


```{r exercise3.3}
tmpFn <- function(xVec) {
  result <- ifelse(xVec < 0,
   xVec^2 + 2*xVec + 3,
      ifelse(xVec < 2,
       xVec + 3,
       xVec^2 + 4*xVec - 7))
```return(result)}
```


```{r exercise3.4}
a=function(x){
  a=x
x1=(x%%2!=0)
x[x1]=a[x1]*2
return(a)
}
```


```{r exercise3.5}
a=function(n,k){
  x=matrix(0,nrow=n,ncol=n)
  diag(x)=k
  x[abs(row(x)-col(x))==1]=1
  return(x)}
```


```{r exercise3.6}
quadrant <- function(alpha) {
  alpha_mod <- alpha %% 360
  if (alpha_mod >= 0 && alpha_mod < 90) {
    return(1)
  } else if (alpha_mod >= 90 && alpha_mod < 180) {
    return(2)
  } else if (alpha_mod >= 180 && alpha_mod < 270) {
    return(3)
  } else if (alpha_mod >= 270 && alpha_mod < 360) {
    return(4)
  }
```


```{r exercise3.7}
a=function(d,m,y1)
  k=d
c=y%/%100
y=y1%%100
 f = (floor(2.6 * m - 0.2) + k + floor(y / 4) + floor(c / 4) - 2 * c) %% 7
num =(f + 6) %% 7 + 1
return(num)}
```


```{r exercise3.8}
testloop=function(n){
  x=numeric(n-1)
 x[1]=1
 x[2]=2
 for (j in 3:(n-1)) {x[j] = x[j-1] + 2 / x[j-1]}
 return(x)}
 print(testloop(6))
   
 testloop2=function(yVec){n=length(yVec)
 a=1:n
 value=sum(exp(1)^a)
 return(value)}
```


```{r exercise3.9}
quadmap=function(s,r,n){
  x=numeric(n)
x[1]=s
for (k in 2:n) {x[k]=r*x[k-1](1-x[k-1])}
return(x)}

tmp <- quadmap(s=0.95, r=2.99, n=500)
plot(tmp, type="l")
plot(tmp[300:500], type="l")
```


```{r exercise3.9}
tmpFn =function(xVec) {
  n = length(xVec)
  xbar = mean(xVec)
  a = sum((xVec[2:n] - xbar) * (xVec[1:(n-1)] - xbar))
 b =ifelse(n > 2, sum((xVec[3:n] - xbar) * (xVec[1:(n-2)] - xbar)), NA)
  a = sum((xVec - xbar)^2)
  
  r1 = a / b
  r2 = a / b
  
  return(list(r1 = r1, r2 = r2))
```


```{r exercise4.1}
z_outer = function(x, y) {
m = outer(x, y, function(a, b) b < a)
 z = rowSums(m)
 return(z)
}

z_sapply = function(x, y) {
  z = sapply(x, function(a) sum(y < a))
  return(z)
}zz

z_vapply = function(x, y) {
  z = vapply(x, function(a) sum(y < a), integer(1))
  return(z)
}
```


```{r exercise4.2}
```f1 = function(mat) {
  col_ok = !apply(is.na(mat), 2, any)
  return(mat[, col_ok, drop=FALSE])
}
f2 = function(mat) {
  row_ok = !apply(is.na(mat), 1, any)
  col_ok = !apply(is.na(mat), 2, any)
  return(mat[row_ok, col_ok, drop=FALSE])
``}`
```


```{r exercise4.3}
empCopula = function(u, v, xVec, yVec) {
  n = length(xVec)
  r = rank(xVec)  
  s = rank(yVec)  
  indicators = (r / (n + 1) <= u) & (s / (n + 1) <= v)
  c_val = sum(indicators) / n
  return(c_val)
}
empCopula_vec = function(u, v, xVec, yVec) {
  n = length(xVec)
  r =rank(xVec)
  s = rank(yVec)
  single_copula= function(ui, vi) {
    sum((r/(n+1) <= ui) & (s/(n+1) <= vi)) / n
  }
  mapply(single_copula, u, v)
}
```
```{r exercise4.4}
funA = function(n) {
  sum = 0
  for (i in 1:n) {
    for (r in 1:n) {
      sum = sum + r^2 / (10 + 4 * r^3)
    }
  }
  return(sum)
}
funB = function(n) {
  r = matrix(1:n, nrow=n, ncol=n, byrow=TRUE)  
  val = r^2 / (10 + 4 * r^3)
  sum(val)
}
funC = function(n) {
  r = 1:n
  mat = outer(r, r, function(i, j) i^2 / (10 + 4 * i^3))   
  sum(mat)
}
funE = function(r) {
  sum(sapply(r, function(s) s^2 / (10 + 4 * s^3)))
}

funD = function(n) {
  sum(sapply(1:n, function(i) funE(1:n)))
}
funF = function(r, s) {
  (as.integer(s <= r)) * s^2 / (10 + 4 * s^3)
}

funM = function(n) {
  sum(mapply(funF, rep(1:n, each = n), rep(1:n, times = n)))
}
```


```{r exercise4.5}
```rwalk <- function(n) {
  x <- sample(c(-1, 1), n, replace=TRUE, prob=c(0.5,0.5))
  s <- c(0, cumsum(x))
  return(s)
}
rwalkPos <- function(n) {
  s <- rwalk(n)
  out <- sum(s > 0)
  return(out)
}
rwalkPos1 <- function(nReps, n) {
  out <- numeric(nReps)
  for (i in 1:nReps) {
    out[i] <- rwalkPos(n)
  }
  return(out)
}
system.time(rwalkPos1(1000, 1000))
system.time(rwalkPos2(1000, 1000))
```


```{r exercise5.1}
tsEwma = function(tsDat, m0=0, delta=0.7) {
  n = length(tsDat)
  m = numeric(n)
  mPrev = m0
  for (i in 1:n) {
    e = tsDat[i] - mPrev
    m[i] = mPrev + (1 - delta) * e
    mPrev = m[i]
  }
  out <- ts(m, start=start(tsDat), frequency=frequency(tsDat))
  return(out)
}
tsEwmaFast = function(tsDat, m0=0, delta=0.7) {
  z = as.numeric(tsDat)   
  n =length(z)
  m = numeric(n)
  mPrev = m0
  
  for (i in 1:n) {
    e = z[i] - mPrev
    m[i] = mPrev + (1 - delta) * e
    mPrev = m[i]
  }
  out <- ts(m, start=start(tsDat), frequency=frequency(tsDat))
  return(out)
}
set.seed(1)
datVec <- rnorm(5000)
z <- ts(datVec, start=c(1960,3), frequency=12)
system.time(tsEwma(z, m0=0, delta=0.7))
system.time(tsEwmaFast(z, m0=0, delta=0.7))
```


```{r exercise5.2}
myListFn = function(n) {
  x = rnorm(n, mean=0, sd=1)
  xm =mean(x)
  if (xm >= 0) {
    y =rexp(n, rate=1/xm)
  } else {
    z = rexp(n, rate=1/(-xm))
    y = -z
  k = sum(abs(y) > abs(x))
  return(list(xVec=x, yVec=y, count=k))
}
set.seed(1)
lapply(rep(10,4), myListFn)   
sapply(rep(10,4), myListFn)  

yList = lapply(myList, function(x) x$yVec)
yMat =sapply(myList, function(x) x$yVec)
dim(yMat) 
myListNoCount = lapply(myList, function(x) {
  x$count = NULL
  return(x)
})

myListBig <- myList[sapply(myList, function(x) x$count > 2)]
```


```{r exercise5.3}
myList = [[j+i*10 for j in range(1,11)] for i in range(1000)]
yList = [[j*2+i*5 for j in range(1,11)] for i in range(1000)]
a = []
for i in range(1000):
    up = 0
    down = 0
    for j in range(10):
        up = up + (j+1)*myList[i][j]
        down = down + (j+1)*yList[i][j]
    a.append(up/down)
b = []
for i in range(1000):
    row = []
    for j in range(10):
        row.append(myList[i][j] - yList[i][j])
    b.append(row)
n = 1000
top = 0
bottom = 0
for i in range(n):
    top = top + (i+1)*myList[i][1] 
    bottom = bottom + (i+1)*yList[i][1]
c = top / bottom
```


```{r exercise5.4}
testArray = array(sample(1:60, 60, replace=F), dim=c(5,4,3))
testFn = function(arr) {
  d = dim(arr)   
  w =arr
  for (j in 1:d[2]) {
    for (k in 1:d[3]) {
      w[,j,k] <- arr[,j,k] - min(arr[,j,k])
    }
  }
  z = matrix(0, nrow=d[2], ncol=d[3])
  for (j in 1:d[2]) {
    for (k in 1:d[3]) {
      z[j,k] <- sum(arr[,j,k]) - max(arr[,j,k])
    }
  }
  
  return(list(w=w, z=z))
}
testFn2 = function(arr) {
  d =dim(arr)
  z = matrix(0, nrow=d[2], ncol=d[3])
  
  for (j in 1:d[2]) {
    for (k in 1:d[3]) {
      z[j,k] = sum(arr[,j,k]^k)
    }
  }
  
  return(z)
}





```

